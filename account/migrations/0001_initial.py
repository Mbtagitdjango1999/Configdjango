# Generated by Django 4.2.3 on 2023-07-19 13:22

import account.helpers.enums
import account.repository.manager.user
from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import secrets


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='auto insertion', verbose_name='Created')),
                ('modified', models.DateTimeField(auto_now=True, help_text='auto mification', verbose_name='Modified')),
                ('secret', models.CharField(default=secrets.token_urlsafe, editable=False, help_text='user secret key use for encryption and token generation', max_length=43, unique=True)),
                ('username', models.CharField(error_messages={'min_length': 'your user name must be more than 3 character', 'unique': 'A user with that username already exists.'}, help_text='Required. 15 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=15, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator(), django.core.validators.RegexValidator(account.helpers.enums.RegexPatternEnum['USERNAME']), django.core.validators.MaxLengthValidator(15), django.core.validators.MinLengthValidator(3)], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, null=True, validators=[django.core.validators.RegexValidator(account.helpers.enums.RegexPatternEnum['NAME']), django.core.validators.MaxLengthValidator(15), django.core.validators.MinLengthValidator(3)], verbose_name='first name')),
                ('last_name', models.CharField(blank=True, null=True, validators=[django.core.validators.RegexValidator(account.helpers.enums.RegexPatternEnum['NAME']), django.core.validators.MaxLengthValidator(15), django.core.validators.MinLengthValidator(3)], verbose_name='last name')),
                ('phone_number', models.CharField(help_text='users', max_length=15, unique=True, validators=[django.core.validators.RegexValidator(account.helpers.enums.RegexPatternEnum['IRAN_PHONE_NUMBER'], django.core.validators.MaxLengthValidator(15), django.core.validators.MinLengthValidator(10))], verbose_name='Phone Number')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, validators=[django.core.validators.EmailValidator('email is valid')], verbose_name='Email Adress')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', account.repository.manager.user.UserDataAccessLayer()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='auto insertion', verbose_name='Created')),
                ('modified', models.DateTimeField(auto_now=True, help_text='auto mification', verbose_name='Modified')),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('prefer_not', 'Do Not Prefer To Say'), ('non_binary', 'Non Binary')], help_text="User's Gender", max_length=10, null=True, verbose_name='Gender')),
                ('user', models.OneToOneField(help_text="the user's profile information", on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
            },
        ),
    ]
